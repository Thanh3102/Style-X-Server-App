generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Employee {
  id                Int       @id @default(autoincrement())
  code              String    @unique
  username          String
  password          String
  name              String
  email             String
  phoneNumber       String    @map("phone_number")
  gender            Boolean
  dateOfBirth       DateTime  @map("date_of_birth") @db.Date
  isEmployed        Boolean   @default(true) @map("is_employed")
  void              Boolean   @default(false)
  lastLoginAt       DateTime? @map("last_login_at")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at")
  createdEmployeeId Int?      @map("created_employee_id")
  roleId            Int

  role                    Role               @relation("EmployeeRole", references: [id], fields: [roleId])
  creator                 Employee?          @relation("EmployeeCreator", fields: [createdEmployeeId], references: [id])
  createdEmployees        Employee[]         @relation("EmployeeCreator")
  lastUpdateSuppliers     Supplier[]         @relation("supplierLastUpdateUser")
  createdSuppliers        Supplier[]         @relation("supplierCreatedUser")
  deletedSuppliers        Supplier[]         @relation("supplierDeletedUser")
  assignedSuppliers       Supplier[]         @relation("supplierAssigned")
  createdWarehouses       Warehouse[]        @relation("createdWarehouseUser")
  updatedWarehouse        Warehouse[]        @relation("updatedWarehouseUser")
  createdProduct          Product[]          @relation("ProductCreater")
  updatedProduct          Product[]          @relation("ProductUpdater")
  inventoryHistory        InventoryHistory[] @relation("InventoryHistoryChangeUser")
  createdReceiveInventory ReceiveInventory[] @relation("ReceiveInventory_CreateUser")
  receiveChangeHistories  ReceiveHistory[]   @relation("ReceiveHistory_ChangeUser")
  createdDiscount         Discount[]         @relation("DiscountCreatedUser")
  changedOrderHistory     OrderHistory[]     @relation("OrderHistoryChangeUser")

  @@map("employees")
}

model Category {
  id            Int      @id @default(autoincrement())
  title         String
  slug          String?
  image         String?
  imagePublicId String?  @map("image_public_id")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  collectionId  Int      @default(1) @map("collection_id")

  collection         Collection         @relation("Category_Collection", references: [id], fields: [collectionId], onDelete: Cascade)
  categories         ProductCategory[]  @relation("ProductCategory_Category")
  discountCategories DiscountCategory[] @relation("DiscountCategory_Category")

  @@unique([collectionId, title, slug])
  @@map("categories")
}

model Collection {
  id       Int     @id @default(autoincrement())
  title    String  @unique
  slug     String? @unique
  position Int

  categories Category[] @relation("Category_Collection")

  @@map("collections")
}

model Product {
  id               Int      @id @default(autoincrement())
  name             String
  skuCode          String?  @map("sku_code")
  barCode          String?  @map("bar_code")
  unit             String?
  description      String?  @db.LongText
  shortDescription String?  @map("short_description") @db.LongText
  void             Boolean  @default(false)
  avaiable         Boolean
  type             String?
  vendor           String?
  image            String?
  sellPrice        Int      @default(0) @map("sell_price") @db.UnsignedInt
  costPrice        Int      @default(0) @map("cost_price") @db.UnsignedInt
  comparePrice     Int      @default(0) @map("compare_price") @db.UnsignedInt
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  createdUserId    Int?     @map("created_user_id")
  updatedUserId    Int?     @map("updated_user_id")

  createdUser       Employee?           @relation("ProductCreater", fields: [createdUserId], references: [id])
  updatedUser       Employee?           @relation("ProductUpdater", fields: [updatedUserId], references: [id])
  productProperties ProductProperties[] @relation("ProductProperties")
  productImages     ProductImages[]     @relation("ProductImages")
  tags              ProductTag[]        @relation("productTag")
  variants          ProductVariants[]   @relation("ProductVariants")
  productCategories ProductCategory[]   @relation("ProductCategory_Product")
  discountProducts  DiscountProduct[]   @relation("DiscountProduct_Product")
  cartItems         CartItem[]          @relation("CartItem_Product")
  guestCartItems    GuestCartItem[]     @relation("GuestCartItem_Product")
  orderItems        OrderItem[]         @relation("OrderItem_Product")

  @@map("products")
}

model ProductProperties {
  id        Int    @id @default(autoincrement())
  name      String
  position  Int    @db.TinyInt
  productId Int    @map("product_id")

  product Product                 @relation("ProductProperties", references: [id], fields: [productId], onDelete: Cascade)
  values  ProductPropertyValues[] @relation("ProductProperties")

  @@unique([productId, name])
  @@map("product_properties")
}

model ProductPropertyValues {
  id    Int    @id @default(autoincrement())
  value String

  productPropertyId Int               @map("product_property_id")
  productProperty   ProductProperties @relation("ProductProperties", fields: [productPropertyId], references: [id], onDelete: Cascade)

  @@unique([value, productPropertyId])
  @@map("product_property_values")
}

model ProductVariants {
  id           Int      @id @default(autoincrement())
  title        String
  skuCode      String?  @map("sku_code")
  barCode      String?  @map("bar_code")
  unit         String?
  void         Boolean  @default(false)
  sellPrice    Int      @default(0) @map("sell_price") @db.UnsignedInt
  costPrice    Int      @default(0) @map("cost_price") @db.UnsignedInt
  comparePrice Int      @default(0) @map("compare_price") @db.UnsignedInt
  option1      String?
  option2      String?
  option3      String?
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  productId    Int      @map("product_id")
  image        String?

  inventories      Inventory[]       @relation("InventoryProductVariant")
  product          Product           @relation("ProductVariants", references: [id], fields: [productId])
  receiveItems     ReceiveItem[]     @relation("ReceiveItem_Variant")
  discountVariants DiscountVariant[] @relation("DiscountVariant_ProductVariant")
  cartItems        CartItem[]        @relation("CartItem_Variant")
  guestCartItems   GuestCartItem[]   @relation("GuestCartItem_Variant")
  orderItems       OrderItem[]       @relation("OrderItem_Variant")

  // @@unique([title, ])
  @@map("product_variants")
}

model ProductImages {
  id        Int      @id @default(autoincrement())
  url       String
  assetId   String   @unique @map("asset_id")
  publicId  String   @unique @map("public_id")
  bytes     Int
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  productId Int      @map("product_id")

  product Product @relation("ProductImages", references: [id], fields: [productId])

  @@map("product_images")
}

model ProductCategory {
  categoryId Int @map("category_id")
  productId  Int @map("product_id")

  category Category @relation("ProductCategory_Category", fields: [categoryId], references: [id])
  product  Product  @relation("ProductCategory_Product", fields: [productId], references: [id])

  @@id([categoryId, productId])
  @@map("product_category")
}

model Inventory {
  id            Int @id @default(autoincrement())
  avaiable      Int @default(0)
  onHand        Int @default(0) @map("on_hand")
  onTransaction Int @default(0) @map("on_transaction")
  onReceive     Int @default(0) @map("on_receive")
  warehouse_id  Int
  variant_id    Int

  histories      InventoryHistory[] @relation("InventoryHistory_Inventory")
  warehouse      Warehouse          @relation("InventoryWarehouse", references: [id], fields: [warehouse_id])
  productVariant ProductVariants    @relation("InventoryProductVariant", references: [id], fields: [variant_id])

  @@unique([variant_id, warehouse_id])
}

model InventoryHistory {
  id                          Int      @id @default(autoincrement())
  avaiableQuantityChange      Int?     @default(0) @map("avaiable_quantity_change")
  onHandQuantityChange        Int?     @default(0) @map("on_hand_quantity_change")
  OnTransactionQuantityChange Int?     @default(0) @map("on_transaction_quantity_change")
  onReceiveQuantityChange     Int?     @default(0) @map("on_receive_quantity_change")
  newAvaiable                 Int?     @map("new_avaiable")
  newOnHand                   Int?     @map("new_on_hand")
  newOnTransaction            Int?     @map("new_on_transaction")
  newOnReceive                Int?     @map("new_receive")
  transactionType             String   @map("transaction_type")
  transactionAction           String   @map("transaction_action")
  reason                      String?
  changeOn                    DateTime @default(now()) @map("change_on")
  changeUserId                Int?     @map("change_user_id")
  inventoryId                 Int      @map("inventory_id")
  receiveInventoryId          Int?     @map("receive_inventory_id")
  orderId                     String?  @map("order_id")

  inventory        Inventory         @relation("InventoryHistory_Inventory", fields: [inventoryId], references: [id])
  changeUser       Employee?         @relation("InventoryHistoryChangeUser", references: [id], fields: [changeUserId])
  receiveInventory ReceiveInventory? @relation("InventoryHistory_Receive", references: [id], fields: [receiveInventoryId])
  order            Order?            @relation("InventoryHistory_Order", references: [id], fields: [orderId])

  @@map("inventory_history")
}

model Supplier {
  id               Int      @id @default(autoincrement())
  code             String   @unique
  name             String   @unique
  phoneNumber      String?  @map("phone_number")
  email            String?
  taxCode          String?  @map("tax_code")
  website          String?
  fax              String?
  country          String?
  province         String?
  district         String?
  ward             String?
  detailAddress    String?  @map("detail_address")
  active           Boolean  @default(true)
  void             Boolean  @default(false)
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @updatedAt @map("updated_at")
  assignedId       Int      @map("assigned_id")
  createdUserId    Int?     @map("created_user_id")
  deletedUserId    Int?     @map("deleted_user_id")
  lastUpdateUserId Int?     @map("last_update_user_id")

  assigned           Employee           @relation("supplierAssigned", fields: [assignedId], references: [id])
  createdUser        Employee?          @relation("supplierCreatedUser", fields: [createdUserId], references: [id])
  deletedUser        Employee?          @relation("supplierDeletedUser", fields: [deletedUserId], references: [id])
  lastUpdateUser     Employee?          @relation("supplierLastUpdateUser", fields: [lastUpdateUserId], references: [id])
  tags               SupplierTag[]      @relation("supplierTag")
  receiveInventories ReceiveInventory[] @relation("ReceiveInventory_Supplier")

  @@map("suppliers")
}

model Tag {
  id         Int      @id @default(autoincrement())
  name       String
  type       String
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")
  lastUsedAt DateTime @default(now())

  supplierTags SupplierTag[]         @relation("tagSupplier")
  productTags  ProductTag[]          @relation("tagProduct")
  receiveTags  ReceiveInventoryTag[] @relation("tagReceive")

  @@unique([name, type])
  @@map("tags")
}

model SupplierTag {
  id         Int @id @default(autoincrement())
  supplierId Int @map("supplier_id")
  tagId      Int @map("tag_id")

  supplier Supplier @relation("supplierTag", fields: [supplierId], references: [id])
  tags     Tag      @relation("tagSupplier", fields: [tagId], references: [id])

  @@map("supplier_tag")
}

model ProductTag {
  id        Int @id @default(autoincrement())
  productId Int @map("product_id")
  tagId     Int @map("tag_id")

  product Product @relation("productTag", fields: [productId], references: [id])
  tags    Tag     @relation("tagProduct", fields: [tagId], references: [id])

  @@map("product_tag")
}

model Warehouse {
  id            Int      @id @default(autoincrement())
  name          String   @unique
  code          String   @unique
  phoneNumber   String   @map("phone_number")
  email         String
  // country       String?
  province      String
  district      String
  ward          String
  address       String
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt
  createdUserId Int?     @map("created_user_id")
  updatedUserId Int?     @map("updated_user_id")
  active        Boolean  @default(true)

  createdUser        Employee?          @relation("createdWarehouseUser", fields: [createdUserId], references: [id])
  updatedUser        Employee?          @relation("updatedWarehouseUser", fields: [updatedUserId], references: [id])
  inventories        Inventory[]        @relation("InventoryWarehouse")
  receiveInventories ReceiveInventory[] @relation("ReceiveInventory_Warehouse")
  orderItemSource    OrderItemSource[]  @relation("OrderWarehouseSource")

  @@map("warehouses")
}

model ReceiveInventory {
  id                            Int       @id @default(autoincrement())
  code                          String    @unique
  importAfterCreate             Boolean   @map("import_after_create")
  totalReceipt                  Int       @map("total_receipt")
  totalLandedCost               Int       @map("total_landed_cost")
  totalItems                    Int       @map("total_items")
  totalItemsDiscount            Int       @map("total_items_discount")
  totalItemsPrice               Int       @map("total_items_price")
  totalItemsPriceBeforeDiscount Int       @map("total_item_price_before_discount")
  transactionStatus             String    @map("transaction_status")
  transactionRemainAmount       Int       @map("transaction_remain_amount")
  status                        String
  note                          String?
  warehouseId                   Int       @map("warehouseId")
  supplierId                    Int       @map("supplier_id")
  expectedAt                    DateTime? @db.Date
  createdAt                     DateTime  @default(now())
  createUserId                  Int
  void                          Boolean   @default(false)

  supplier            Supplier              @relation("ReceiveInventory_Supplier", references: [id], fields: [supplierId])
  warehouse           Warehouse             @relation("ReceiveInventory_Warehouse", references: [id], fields: [warehouseId])
  receiveTransactions ReceiveTransaction[]  @relation("ReceiveInventory_Transaction")
  receiveLandedCosts  ReceiveLandedCost[]   @relation("ReceiveInventory_LandedCost")
  receiveHistories    ReceiveHistory[]      @relation("ReceiveInventory_History")
  createUser          Employee              @relation("ReceiveInventory_CreateUser", references: [id], fields: [createUserId])
  inventoryHistories  InventoryHistory[]    @relation("InventoryHistory_Receive")
  tags                ReceiveInventoryTag[] @relation("receiveTags")
  items               ReceiveItem[]         @relation("ReceiveItem_ReceiveInventory")
  orderItemSource     OrderItemSource[]     @relation("OrderReceiveSource")

  @@map("receive_inventory")
}

model ReceiveItem {
  id               Int    @id @default(autoincrement())
  quantity         Int
  quantityAvaiable Int    @map("quantity_avaiable")
  quantityReceived Int    @map("quantity_received")
  quantityRemain   Int    @map("quantity_remain")
  price            Int
  total            Int
  finalPrice       Int    @map("final_price")
  finalTotal       Int    @map("final_total")
  discountType     String @map("discount_type")
  discountValue    Int    @map("discount_value")
  discountAmount   Int    @map("discount_amount")
  discountTotal    Int    @map("discount_total")
  variantId        Int    @map("variant_id")
  receiveId        Int    @map("receive_id")

  variant          ProductVariants  @relation("ReceiveItem_Variant", references: [id], fields: [variantId])
  receiveInventory ReceiveInventory @relation("ReceiveItem_ReceiveInventory", references: [id], fields: [receiveId])

  @@unique([receiveId, variantId])
  @@map("receive_item")
}

model ReceiveLandedCost {
  id        Int    @id @default(autoincrement())
  name      String
  price     Int    @db.UnsignedInt
  receiveId Int    @map("receive_id")

  receiveInventory ReceiveInventory @relation("ReceiveInventory_LandedCost", references: [id], fields: [receiveId])

  @@map("receive_landed_cost")
}

model ReceiveTransaction {
  id            Int      @id @default(autoincrement())
  amount        Int      @db.UnsignedInt
  paymentMethod String   @map("payment_method")
  processedAt   DateTime @map("processed_At")
  createdAt     DateTime @default(now()) @map("created_at")
  receiveId     Int      @map("receive_id")

  receiveHistory   ReceiveHistory?  @relation("ReceiveHistory_Transaction")
  receiveInventory ReceiveInventory @relation("ReceiveInventory_Transaction", references: [id], fields: [receiveId])

  @@map("receive_transaction")
}

model ReceiveHistory {
  id            Int      @id @default(autoincrement())
  action        String
  type          String
  transactionId Int?     @unique @map("transaction_id")
  changedUserId Int      @map("changed_user_id")
  receiveId     Int      @map("receive_id")
  createdAt     DateTime @default(now()) @map("created_at")

  changedUser        Employee            @relation("ReceiveHistory_ChangeUser", references: [id], fields: [changedUserId])
  receiveTransaction ReceiveTransaction? @relation("ReceiveHistory_Transaction", references: [id], fields: [transactionId])
  receiveInventory   ReceiveInventory    @relation("ReceiveInventory_History", references: [id], fields: [receiveId])

  @@map("receive_history")
}

model ReceiveInventoryTag {
  id        Int @id @default(autoincrement())
  tagId     Int @map("tag_id")
  receiveId Int @map("receive_id")

  tag     Tag              @relation("tagReceive", references: [id], fields: [tagId])
  receive ReceiveInventory @relation("receiveTags", references: [id], fields: [receiveId])

  @@map("receive_inventory_tag")
}

model Discount {
  id                          Int       @id @default(autoincrement())
  type                        String
  mode                        String
  title                       String
  description                 String?
  value                       Int
  valueLimitAmount            Int?      @map("value_limit_amount")
  valueType                   String
  entitle                     String
  prerequisite                String
  prerequisiteMinTotal        Int?      @map("prerequisite_min_total")
  prerequisiteMinItem         Int?      @map("prerequisite_min_item")
  prerequisiteMinItemTotal    Int?      @map("prerequisite_min_item_total")
  usageLimit                  Int?      @map("usage_limit")
  onePerCustomer              Boolean   @map("one_per_customer")
  combinesWithProductDiscount Boolean   @map("combines_with_product_discount")
  combinesWithOrderDiscount   Boolean   @map("combines_with_order_discount")
  startOn                     DateTime  @map("start_on")
  endOn                       DateTime? @map("end_on")
  active                      Boolean
  summary                     String    @db.MediumText
  applyFor                    String    @map("apply_for")
  usage                       Int?      @default(0)
  createdAt                   DateTime  @default(now()) @map("created_at")
  updatedAt                   DateTime  @updatedAt
  createdUserId               Int
  void                        Boolean   @default(false)

  createdUser       Employee           @relation("DiscountCreatedUser", fields: [createdUserId], references: [id])
  entitleProducts   DiscountProduct[]  @relation("DiscountProduct")
  entitleVariants   DiscountVariant[]  @relation("DiscountVariant")
  entitleCategories DiscountCategory[] @relation("DiscountCategory")

  // prerequisiteCustomerGroupIds Int[]
  appliedOrders        OrderApplyDiscount[]     @relation("OrderApply_Discount")
  appliedOrderItems    OrderItemApplyDiscount[] @relation("OrderItemApplyDiscount")
  appliedOrderVouchers OrderApplyVoucher[]      @relation("OrderApplyVoucher_Discount")
}

model DiscountProduct {
  productId  Int @map("product_id")
  discountId Int @map("discount_id")

  // product Product @relation("DiscountProduct")
  discount Discount @relation("DiscountProduct", references: [id], fields: [discountId])
  product  Product  @relation("DiscountProduct_Product", references: [id], fields: [productId])

  @@id([productId, discountId])
  @@map("discount_product")
}

model DiscountVariant {
  variantId  Int @map("variant_id")
  discountId Int @map("discount_id")

  discount Discount        @relation("DiscountVariant", references: [id], fields: [discountId])
  variant  ProductVariants @relation("DiscountVariant_ProductVariant", references: [id], fields: [variantId])

  @@id([variantId, discountId])
  @@map("discount_variant")
}

model DiscountCategory {
  categoryId Int @map("category_id")
  discountId Int @map("discount_id")

  discount Discount @relation("DiscountCategory", references: [id], fields: [discountId])
  category Category @relation("DiscountCategory_Category", references: [id], fields: [categoryId])

  @@id([categoryId, discountId])
  @@map("discount_category")
}

model Customer {
  id           String    @id @default(uuid())
  code         String    @unique
  name         String
  email        String    @unique
  password     String
  gender       String
  dob          DateTime  @db.Date
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime  @updatedAt @map("updated_at")
  lastModifyAt DateTime  @default(now()) @map("last_modify_at")
  lastLoginAt  DateTime? @map("last_login_at")

  cart                  Cart?          @relation("Customer_Cart")
  orders                Order[]        @relation("Customer_Order")
  changedOrderHistories OrderHistory[] @relation("OrderHistoryChangeCustomer")
}

model CustomerVerify {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  gender    String
  dob       DateTime @db.Date
  otp       String   @unique
  otpExpiry DateTime
  isVerify  Boolean  @default(false)
  attemps   Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  @@map("customer_verify")
}

model Cart {
  id         Int    @id @default(autoincrement())
  customerId String @unique @map("customer_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  customer Customer   @relation("Customer_Cart", references: [id], fields: [customerId])
  items    CartItem[] @relation("CartItem_Cart")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int      @map("cart_id")
  productId Int      @map("product_id")
  variantId Int      @map("variant_id")
  quantity  Int      @db.UnsignedInt
  selected  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cart    Cart            @relation("CartItem_Cart", references: [id], fields: [cartId])
  product Product         @relation("CartItem_Product", references: [id], fields: [productId])
  variant ProductVariants @relation("CartItem_Variant", references: [id], fields: [variantId])

  @@unique([cartId, productId, variantId])
  @@map("cart_item")
}

model GuestCart {
  id String @id @default(uuid())

  expires   DateTime
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  items GuestCartItem[] @relation("GuestCartItem_GuestCart")

  @@map("guest_cart")
}

model GuestCartItem {
  id        Int      @id @default(autoincrement())
  cartId    String   @map("cart_id")
  productId Int      @map("product_id")
  variantId Int      @map("variant_id")
  quantity  Int      @db.UnsignedInt
  selected  Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  cart    GuestCart       @relation("GuestCartItem_GuestCart", references: [id], fields: [cartId])
  product Product         @relation("GuestCartItem_Product", references: [id], fields: [productId])
  variant ProductVariants @relation("GuestCartItem_Variant", references: [id], fields: [variantId])

  @@unique([cartId, productId, variantId])
  @@map("guest_cart_item")
}

model Order {
  id                       String   @id @default(uuid())
  code                     String?  @unique
  totalItemBeforeDiscount  Int      @map("total_item_before_discount") @db.UnsignedInt
  totalItemAfterDiscount   Int      @map("total_item_after_discount") @db.UnsignedInt
  totalItemDiscountAmount  Int      @map("total_item_discount_amount") @db.UnsignedInt
  totalOrderDiscountAmount Int      @map("total_order_discount_amount") @db.UnsignedInt
  totalOrderBeforeDiscount Int      @map("total_order_before_discount") @db.UnsignedInt
  totalOrderAfterDiscount  Int      @map("total_order_after_discount") @db.UnsignedInt
  userType                 String   @map("user_type")
  status                   String
  transactionStatus        String   @map("transaction_status")
  // deliveryStatus           String   @map("delivery_status")
  paymentMethod            String?  @map("payment_method")
  email                    String?
  name                     String?
  phoneNumber              String?
  province                 String?
  district                 String?
  ward                     String?
  address                  String?
  note                     String?
  receiverName             String?  @map("receiver_name")
  receiverPhoneNumber      String?  @map("receiver_phonenumber")
  payOSCode                String?  @map("pay_os_code")
  createdAt                DateTime @default(now())
  expire                   BigInt   @db.UnsignedBigInt
  customerId               String?
  void                     Boolean  @default(false)

  items              OrderItem[]          @relation("Order_OrderItem")
  customer           Customer?            @relation("Customer_Order", references: [id], fields: [customerId])
  applyDiscounts     OrderApplyDiscount[] @relation("OrderApplyDiscount")
  history            OrderHistory[]       @relation("OrderHistory")
  applyVouchers      OrderApplyVoucher[]  @relation("OrderVoucher")
  inventoryHistories InventoryHistory[]   @relation("InventoryHistory_Order")
  // transactions   OrderTransaction[]   @relation("OrderTransaction")
}

model OrderApplyDiscount {
  id                         Int     @id @default(autoincrement())
  value                      Int
  valueType                  String  @map("value_type")
  valueLimitAmount           Int?    @map("value_limit_amount")
  discountAmount             Int     @map("discount_amount") @db.UnsignedInt
  combineWithProductDiscount Boolean @map("combine_with_product_discount")
  combineWithOrderDiscount   Boolean @map("combine_with_order_discount")
  discountId                 Int     @map("discount_id")
  orderId                    String

  discount Discount @relation("OrderApply_Discount", references: [id], fields: [discountId])
  order    Order    @relation("OrderApplyDiscount", references: [id], fields: [orderId], onDelete: Cascade)

  @@map("order_apply_discount")
}

model OrderItem {
  id                       Int    @id @default(autoincrement())
  orderId                  String
  productId                Int
  variantId                Int
  quantity                 Int
  priceBeforeDiscount      Int    @map("price_before_discount") @db.UnsignedInt
  totalPriceBeforeDiscount Int    @map("total_price_before_discount") @db.UnsignedInt
  priceAfterDiscount       Int    @map("price_after_discount") @db.UnsignedInt
  totalPriceAfterDiscount  Int    @map("total_price_after_discount") @db.UnsignedInt
  discountAmount           Int    @map("discount_amount") @db.UnsignedInt
  totalDiscountAmount      Int    @map("total_discount_amount") @db.UnsignedInt

  order          Order                    @relation("Order_OrderItem", references: [id], fields: [orderId], onDelete: Cascade)
  product        Product                  @relation("OrderItem_Product", references: [id], fields: [productId])
  variant        ProductVariants          @relation("OrderItem_Variant", references: [id], fields: [variantId], onDelete: Cascade)
  applyDiscounts OrderItemApplyDiscount[] @relation("OrderItem_ApplyDiscount")
  sources        OrderItemSource[]        @relation("OrderItemSource")

  @@map("order_item")
}

model OrderItemApplyDiscount {
  id                         Int     @id @default(autoincrement())
  value                      Int
  valueType                  String  @map("value_type")
  valueLimitAmount           Int?    @map("value_limit_amount")
  discountAmount             Int     @map("discount_amount") @db.UnsignedInt
  combineWithProductDiscount Boolean @map("combine_with_product_discount")
  combineWithOrderDiscount   Boolean @map("combine_with_order_discount")
  discountId                 Int     @map("discount_id")
  orderItemId                Int     @map("order_item_id")

  discount  Discount  @relation("OrderItemApplyDiscount", fields: [discountId], references: [id], onDelete: Cascade)
  orderItem OrderItem @relation("OrderItem_ApplyDiscount", fields: [orderItemId], references: [id], onDelete: Cascade)

  @@map("order_item_apply_discount")
}

model OrderItemSource {
  id          Int  @id @default(autoincrement())
  quantity    Int
  costPrice   Int  @map("cost_price")
  orderItemId Int  @map("order_item_id")
  receiveId   Int? @map("receive_id")
  warehouseId Int  @map("warehouse_id")

  orderItem OrderItem         @relation("OrderItemSource", references: [id], fields: [orderItemId], onDelete: Cascade)
  receive   ReceiveInventory? @relation("OrderReceiveSource", references: [id], fields: [receiveId])
  warehouse Warehouse         @relation("OrderWarehouseSource", references: [id], fields: [warehouseId])

  @@map("order_item_source")
}

// model OrderTransaction {
//   id            Int      @id @default(autoincrement())
//   amount        Int      @db.UnsignedInt
//   paymentMethod String   @map("payment_method")
//   processedAt   DateTime @map("processed_At")
//   createdAt     DateTime @default(now()) @map("created_at")
//   orderId       String   @map("order_id")

//   order Order @relation("OrderTransaction", references: [id], fields: [orderId], onDelete: Cascade)

//   @@map("order_transaction")
// }

model OrderHistory {
  id                Int      @id @default(autoincrement())
  action            String
  type              String
  reason            String?
  // transactionId     Int?     @unique @map("transaction_id")
  changedUserId     Int?     @map("changed_user_id")
  changedCustomerId String?  @map("changed_customer_id")
  orderId           String   @map("order_id")
  createdAt         DateTime @default(now()) @map("created_at")

  changedCustomer Customer? @relation("OrderHistoryChangeCustomer", references: [id], fields: [changedCustomerId])
  changedEmployee Employee? @relation("OrderHistoryChangeUser", references: [id], fields: [changedUserId])
  order           Order     @relation("OrderHistory", references: [id], fields: [orderId], onDelete: Cascade)
  // transaction OrderTransaction?

  @@map("Order_history")
}

model OrderApplyVoucher {
  id         Int    @id @default(autoincrement())
  discountId Int    @map("discount_id")
  orderId    String @map("order_item_id")

  discount Discount @relation("OrderApplyVoucher_Discount", fields: [discountId], references: [id], onDelete: Cascade)
  order    Order    @relation("OrderVoucher", fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_apply_voucher")
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  createdAt   DateTime @default(now())
  updated_at  DateTime @updatedAt
  isEditable  Boolean
  isDeletable Boolean
  void        Boolean  @default(false)

  rolePermissions RolePermission[] @relation("RolePermission_Role")
  employees       Employee[]       @relation("EmployeeRole")
}

model PermissionSection {
  id   Int    @id @default(autoincrement())
  name String @unique

  permissions Permission[] @relation("Permission_PermisstionSection")

  @@map("permission_section")
}

model Permission {
  id          Int    @id @default(autoincrement())
  name        String @unique
  displayName String
  sectionId   Int

  section         PermissionSection @relation("Permission_PermisstionSection", references: [id], fields: [sectionId])
  rolePermissions RolePermission[]  @relation("RolePermission_Permission")
}

model RolePermission {
  permissionId Int
  roleId       Int

  permission Permission @relation("RolePermission_Permission", references: [id], fields: [permissionId], onDelete: Cascade)
  role       Role       @relation("RolePermission_Role", references: [id], fields: [roleId], onDelete: Cascade)

  @@id([permissionId, roleId])
  @@unique([permissionId, roleId])
  @@map("role_permission")
}

model ResetPasswordToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  customerId String   @unique @map("customer_id")
  expires    BigInt
  createAt   DateTime @default(now())

  @@map("reset_password_token")
}
